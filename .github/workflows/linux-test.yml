name: Linux Test

on:
  push:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    strategy:
      matrix:
        compiler:
          - cc: clang
            cxx: clang++
            mode: release
            assert: OFF
            shared: OFF
        runner: [ubuntu-20.04]
        include:
          - runner: ubuntu-20.04
            os: linux
            cmake-args: ''
            tar: tar
    steps:
    - uses: actions/checkout@v2

    - name: Checkout CIRCT
      uses: actions/checkout@v2
      with:
        repository: llvm/circt
        path: circt    
        submodules: 'true'
        fetch-depth: 2

    # --------
    # Restore CIRCT from cache and build if it's not in there.
    # --------

    # Extract the CIRCT submodule hash for use in the cache key.
    - name: Get CIRCT Hash
      id: get-circt-hash
      run: echo "::set-output name=hash::$(git rev-parse @:./circt)"

    - name: Get workflow spec hash
      id: get-workflow-hash
      run: echo "::set-output name=hash::$(shasum $GITHUB_WORKSPACE/.github/workflows/uploadBinaries.yml | awk '{print $1}')"

    # Try to fetch CIRCT from the cache.
    - name: Cache CIRCT
      id: cache-circt
      uses: actions/cache@v2
      with:
        path: |
          circt/build
        key: ${{ matrix.runner }}-circt-${{ steps.get-circt-hash.outputs.hash }}-${{ steps.get-workflow-hash.outputs.hash }}-${{ matrix.compiler.cc }}

    - name: Setup Ninja Linux
      run: apt-get install ninja-build

    # Build LLVM if we didn't hit in the cache. Even though we build it in
    # the previous job, there is a low chance that it'll have been evicted by
    # the time we get here.
    - name: Rebuild CIRCT
      if: steps.cache-circt.outputs.cache-hit != 'true'
      run: |
        mkdir -p circt/llvm/build
        cd circt/llvm/build
        cmake -G Ninja ../llvm \
            ${{ matrix.cmake-args }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.compiler.mode }} \
            -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
            -DBUILD_SHARED_LIBS=${{ matrix.compiler.shared }} \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_ENABLE_ASSERTIONS=${{ matrix.compiler.assert }} \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_ENABLE_OCAMLDOC=OFF \
            -DLLVM_ENABLE_PROJECTS='mlir' \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_PARALLEL_LINK_JOBS=1 \
            -DLLVM_TARGETS_TO_BUILD="host"
        ninja

        cd ../../

        mkdir build
        cd build
        cmake -G Ninja .. \
          ${{ matrix.cmake-args }} \
          -DBUILD_SHARED_LIBS=${{ matrix.compiler.shared }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.compiler.mode }} \
          -DLLVM_ENABLE_ASSERTIONS=${{ matrix.compiler.assert }} \
          -DMLIR_DIR=`pwd`/../llvm/build/lib/cmake/mlir \
          -DLLVM_DIR=`pwd`/../llvm/build/lib/cmake/llvm \
          -DCMAKE_C_COMPILER=${{ matrix.compiler.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler.cxx }} \
          -DVERILATOR_DISABLE=ON \
          -DLLVM_ENABLE_TERMINFO=OFF \
          -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
          -DLLVM_PARALLEL_LINK_JOBS=1 \
          -DCIRCT_RELEASE_TAG_ENABLED=ON \
          -DCIRCT_RELEASE_TAG=${{ github.ref_name }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=OFF
        ninja
        ninja check-circt check-circt-unit
        cd ..

    - name: Install dependencies
      shell: bash
      run: |
          export CIRCT_HOME=$PWD/circt
          mkdir -p circuit/build
          cd circuit/build
          wget https://github.com/llvm/circt/releases/download/sifive%2F1%2F21%2F0/circt-bin-ubuntu-20.04.tar.gz
          tar -xvf circt-bin-ubuntu-20.04.tar.gz
          cd ../..
          apt install -y verilator libgmp-dev libmpfr-dev libmpc-dev
    - name: Install Python packages
      shell: bash -l {0}
      run: |
          pip install pytest
          pip install -e .
    - name: Pytest
      shell: bash -l {0}
      run: |
        pytest tests/
